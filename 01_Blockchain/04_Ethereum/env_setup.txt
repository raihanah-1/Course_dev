================ Blockchain development environment setup on Linux =======================

------------------------------------------------------------------------------------------
                                 Prerequisite
------------------------------------------------------------------------------------------
#docker installation, refer to https://docs.docker.com/install/
A) Install Docker Engine And Docker Compose
	1) Install Docker:
			curl -sSL https://get.docker.com | sh
	2) Adding your user to the "docker" group with something like:
			sudo usermod -aG docker pi
	3) Install docker compose:
	        sudo pip install docker-compose
			

B) Install Go language:
	Not suggest use: `sudo apt-get install golang` to install golang
	All golang package can be found on https://golang.org/dl/
	First of all, download go package and extract to /usr/local
	--- For Ubuntu 22.04
		wget https://storage.googleapis.com/golang/go1.18.2.linux-amd64.tar.gz
		sudo tar -C /usr/local -xzf go1.18.2.linux-amd64.tar.gz
	
	Add GOROOT and GOPATH env variables and append them to PATH
	GOROOT: go_lang library and tools 
	GOPATH: go application work directory
	1) You can create a folder for GOPATH
		mkdir $HOME/go_proj`
	
	2) open ~/.bashrc file and export GOROOT and GOPATH
		pico ~/.bashrc

	3) Append following to end of file
		export GOROOT=/usr/local/go
		export PATH=$PATH:$GOROOT/bin	
		export GOPATH=$HOME/go_proj
		export PATH=$PATH:$GOPATH/bin

	4) activate env
		source ~/.bashrc	
	

C) Reboot & Test
	go version
	docker -v
	docker-compose -v
	pip -V
	git --version
	

---------------------------------------------------------------------------------------------
								Ethereum Blockchain
---------------------------------------------------------------------------------------------
The following instruction introduce How to install an Ethereum blockchain node on Ununtu OS.
	
Method: Build from source code
	A) As a firstt thing we start by updating our software
		sudo apt-get update

	B) Get Source Code
		mkdir -p $GOPATH/src/github.com/ethereum
		cd $GOPATH/src/github.com/ethereum
		git clone https://github.com/ethereum/go-ethereum.git

	C) Ether go-ethereum
		cd go-ethereum
	## We use v1.10.19 for our project, so check out version based on tag
		git checkout v1.10.19

	D) build geth. This will take several minutes to be done.
		make geth

	E) Add go-ethereum executable bin path in ~/.bashrc
		1) open ~/.bashrc file
			pico ~/.bashrc

		2) Append following to end of file
			export GOETHEREUM=$GOPATH/src/github.com/ethereum/go-ethereum/build
			export PATH=$PATH:$GOETHEREUM/bin

		3) activate env
			source ~/.bashrc

	F) Check version 
		geth version

---------------------------------------------------------------------------------------------
								Smart Contract Development
reference:http://chainskills.com/2017/04/10/raspberry-pi-and-ethereum-the-epilogue/
---------------------------------------------------------------------------------------------
1) Prerequisite: make sure your Pi has node installed, if not, try install npm and node.js first.
	Install node.js by executing:
		curl -sL https://deb.nodesource.com/setup_7.x | sudo -E bash -		
		sudo apt-get install nodejs

	
	Test installation:
		node -v
		npm -v

		
2) We use truffle as development IDE, http://truffleframework.com/docs/
	Install truffle on RPI:
		sudo npm install -g truffle
	
	Test installation:
		truffle version
		
3) Prepare the project folder.
	1) New project folder:SmartToken
		mkdir -p ~/Projects/SmartToken
		
	2) Then, use Truffle to initiate your project: 
		cd ~/Projects/SmartToken
		truffle init
		
	3) Install Web3 module:
		cd ~/Projects/SmartToken
		npm install web3@0.20.1
	
	4) Develop smart contract
		refer to http://chainskills.com/2017/04/03/create-and-deploy-a-smart-contract-66/
		
	5) In general, test scripts are saved in ./test folder, you could execute test script like:
		node ./test/wc3_test_token.js

---------------------------------------------------------------------------------------------
								Python Development-Web3
reference:http://web3py.readthedocs.io/en/stable/quickstart.html#environment
---------------------------------------------------------------------------------------------	
1) Prerequisite
	Basic:
		sudo apt-get install python-pip python-dev build-essential
		sudo apt-get install python-setuptools 
	
	python3.5:
		sudo apt-get install python3-pip python3-dev python3-setuptools
		sudo python3.5 -m pip install pip --upgrade
		sudo python3.5 -m pip install setuptools --upgrade
		
2) Install Web3
	sudo python3.5 -m pip install --upgrade web3==3.16.5

			
